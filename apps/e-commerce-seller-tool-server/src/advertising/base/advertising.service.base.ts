/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Advertising as PrismaAdvertising,
  Product as PrismaProduct,
} from "@prisma/client";

export class AdvertisingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdvertisingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.advertising.count(args);
  }

  async advertisings(
    args: Prisma.AdvertisingFindManyArgs
  ): Promise<PrismaAdvertising[]> {
    return this.prisma.advertising.findMany(args);
  }
  async advertising(
    args: Prisma.AdvertisingFindUniqueArgs
  ): Promise<PrismaAdvertising | null> {
    return this.prisma.advertising.findUnique(args);
  }
  async createAdvertising(
    args: Prisma.AdvertisingCreateArgs
  ): Promise<PrismaAdvertising> {
    return this.prisma.advertising.create(args);
  }
  async updateAdvertising(
    args: Prisma.AdvertisingUpdateArgs
  ): Promise<PrismaAdvertising> {
    return this.prisma.advertising.update(args);
  }
  async deleteAdvertising(
    args: Prisma.AdvertisingDeleteArgs
  ): Promise<PrismaAdvertising> {
    return this.prisma.advertising.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.advertising
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
