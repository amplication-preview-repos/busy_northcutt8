/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Advertising } from "./Advertising";
import { AdvertisingCountArgs } from "./AdvertisingCountArgs";
import { AdvertisingFindManyArgs } from "./AdvertisingFindManyArgs";
import { AdvertisingFindUniqueArgs } from "./AdvertisingFindUniqueArgs";
import { CreateAdvertisingArgs } from "./CreateAdvertisingArgs";
import { UpdateAdvertisingArgs } from "./UpdateAdvertisingArgs";
import { DeleteAdvertisingArgs } from "./DeleteAdvertisingArgs";
import { Product } from "../../product/base/Product";
import { AdvertisingService } from "../advertising.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Advertising)
export class AdvertisingResolverBase {
  constructor(
    protected readonly service: AdvertisingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Advertising",
    action: "read",
    possession: "any",
  })
  async _advertisingsMeta(
    @graphql.Args() args: AdvertisingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Advertising])
  @nestAccessControl.UseRoles({
    resource: "Advertising",
    action: "read",
    possession: "any",
  })
  async advertisings(
    @graphql.Args() args: AdvertisingFindManyArgs
  ): Promise<Advertising[]> {
    return this.service.advertisings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Advertising, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Advertising",
    action: "read",
    possession: "own",
  })
  async advertising(
    @graphql.Args() args: AdvertisingFindUniqueArgs
  ): Promise<Advertising | null> {
    const result = await this.service.advertising(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Advertising)
  @nestAccessControl.UseRoles({
    resource: "Advertising",
    action: "create",
    possession: "any",
  })
  async createAdvertising(
    @graphql.Args() args: CreateAdvertisingArgs
  ): Promise<Advertising> {
    return await this.service.createAdvertising({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Advertising)
  @nestAccessControl.UseRoles({
    resource: "Advertising",
    action: "update",
    possession: "any",
  })
  async updateAdvertising(
    @graphql.Args() args: UpdateAdvertisingArgs
  ): Promise<Advertising | null> {
    try {
      return await this.service.updateAdvertising({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Advertising)
  @nestAccessControl.UseRoles({
    resource: "Advertising",
    action: "delete",
    possession: "any",
  })
  async deleteAdvertising(
    @graphql.Args() args: DeleteAdvertisingArgs
  ): Promise<Advertising | null> {
    try {
      return await this.service.deleteAdvertising(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(
    @graphql.Parent() parent: Advertising
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
