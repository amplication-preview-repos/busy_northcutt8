/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Pricing as PrismaPricing,
  Product as PrismaProduct,
} from "@prisma/client";

export class PricingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PricingCountArgs, "select">): Promise<number> {
    return this.prisma.pricing.count(args);
  }

  async pricings(args: Prisma.PricingFindManyArgs): Promise<PrismaPricing[]> {
    return this.prisma.pricing.findMany(args);
  }
  async pricing(
    args: Prisma.PricingFindUniqueArgs
  ): Promise<PrismaPricing | null> {
    return this.prisma.pricing.findUnique(args);
  }
  async createPricing(args: Prisma.PricingCreateArgs): Promise<PrismaPricing> {
    return this.prisma.pricing.create(args);
  }
  async updatePricing(args: Prisma.PricingUpdateArgs): Promise<PrismaPricing> {
    return this.prisma.pricing.update(args);
  }
  async deletePricing(args: Prisma.PricingDeleteArgs): Promise<PrismaPricing> {
    return this.prisma.pricing.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.pricing
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
